import re
from playwright.sync_api import Page, expect #using playwright to achieve browser automation


def test_xss_vulnerability(page: Page):
    page.goto("https://google-gruyere.appspot.com/start")

    # 'Agree and Start' button to be clicked
    agree_button = page.get_by_text("Agree & Start") #directing user to home page whereby user clicks on 'agree and start'
    agree_button.click()
    print('done')
    page.wait_for_timeout(5000)

    #Sign up button to be clicked
    signup_button = page.get_by_text("Sign up")
    signup_button.click()
    print('done')
    page.wait_for_timeout(5000)
    
    #Type in username
    username_field = page.locator('body > div.content > form > table > tbody > tr:nth-child(1) > td:nth-child(2) > input[type=text]')
    username_field.fill("your_username") #inspecting of elements and copying selector details in order to correctly locate text box
    
    #Type in password
    password_field = page.locator('body > div.content > form > table > tbody > tr:nth-child(2) > td:nth-child(2) > input[type=password]')
    password_field.fill("password") #inspecting of elements and copying selector details in order to correctly locate text box
    print('done')
    

    #'Create account' to be clicked
    createaccount_button=page.get_by_text("Create account")
    createaccount_button.click()
    print('done')
    page.wait_for_timeout(5000)

    #Click sign in
    signin_button = page.get_by_text("Sign in")
    signin_button.click()
    print('done')
    page.wait_for_timeout(5000)

    #Enter username and password again
    username_field = page.locator('body > div.content > form > table > tbody > tr:nth-child(1) > td:nth-child(2) > input[type=text]')
    username_field.fill("your_username")

    password_field = page.locator('body > div.content > form > table > tbody > tr:nth-child(2) > td:nth-child(2) > input[type=password]')
    password_field.fill("password")
    print('done')
    page.wait_for_timeout(5000)

    #Click login
    login_button = page.locator('body > div.content > form > table > tbody > tr:nth-child(3) > td:nth-child(2) > input[type=submit]')
    login_button.click()
    page.wait_for_timeout(5000)

    #Now directed to Gruyere homepage. Now click choose upload at the top 
    upload_button = page.get_by_text("Upload")
    upload_button.click()
    print('done')
    page.wait_for_timeout(5000)

    # Click choose file 
    input_field = page.locator('body > div.content > div > form > table > tbody > tr:nth-child(1) > td > input[type=file]') 
    input_field.set_input_files('payload.html')  #this file contains the html script which exploits the vulnerability
    print('done')
    page.wait_for_timeout(5000)
    
    
    #Click choose upload 
    upload_field = page.locator('body > div.content > div > form > table > tbody > tr:nth-child(2) > td > input[type=submit]')
    upload_field.click() #a need to specify which button using selector details since there are two elements on the page with the name 'upload'
    print('done')
    page.wait_for_timeout(5000)

    new_link = page.locator('body > div.content').text_content()
    link  = re.search('https(.*)html', new_link).group()
    print(link)

    page.goto(link)
    page.wait_for_timeout(5000)

    



