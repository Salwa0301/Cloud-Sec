import re
from playwright.sync_api import Page, expect

class PageActions: #Parent class 
    def __init__(self, page):  #initialisation-init is the inbuilt method which is available for every class and takes a key word 'self' which
     #points to the current object that is being created of this particular class
        self.page = page
    
    def fill_input(self, xpath, text):
        input_field = self.page.locator(xpath)
        input_field.fill(text)

    def click_button(self, text):
        button = self.page.get_by_text(text)
        button.click()


class HomePage(PageActions): #child class of PageActions, parent of SignUpPage
    def __init__(self, page):
        self.page = page
        self.navigate_to_home()

    def navigate_to_home(self):
        self.page.goto("https://google-gruyere.appspot.com/start")
        self.click_button("Agree & Start") #directing user to home page whereby user clicks on 'agree and start'
        self.page.wait_for_timeout(5000)
        self.navigate_to_sign_up()

    def navigate_to_sign_up(self):
        self.click_button("Sign up")
        self.page.wait_for_url("**/newaccount.gtl") 

    def navigate_to_upload(self):
        self.click_button("Upload")
        self.page.wait_for_url("**/upload.gtl")


class SignUpPage(HomePage): #child of HomePage
    def __init__(self, page):
        self.page = page

    def sign_up(self):
        #Type in username
        xpath = """body > div.content > form > table > tbody > tr:nth-child(1) > td:nth-child(2) > input[type=text]"""
        self.fill_input(xpath, "username") #inspecting of elements and copying selector details in order to correctly locate text box
    
        #Type in password
        self.fill_input('body > div.content > form > table > tbody > tr:nth-child(2) > td:nth-child(2) > input[type=password]', "password")
        
        
        #'Create account' to be clicked
        self.click_button("Create account")
        
        self.click_button("Home")
        self.navigate_to_upload()
        
class UploadPage(HomePage):
    def __init__(self, page):
        self.page = page 
    def upload_file(self):
        input_field = self.page.locator('body > div.content > div > form > table > tbody > tr:nth-child(1) > td > input[type=file]') 
        input_field.set_input_files('payload.html')  #this file contains the html script which exploits the vulnerability 
        upload_field = self.page.locator('body > div.content > div > form > table > tbody > tr:nth-child(2) > td > input[type=submit]')
        upload_field.click() #two elements on the page with the name 'upload'- copying xpath
        self.page.wait_for_timeout(5000)
        new_link = self.page.locator('body > div.content').text_content()
        link  = re.search('https(.*)html', new_link).group()
        print(link)

        self.page.goto(link)
        self.page.wait_for_timeout(5000)

def test_xss_vulnerability(page: Page):  #order of class execution 
    HomePage(page)
    page.wait_for_timeout(5000)
    SignUpPage(page).sign_up()
    UploadPage(page).upload_file()

    
